## 1

def cipher(msg):
    encrypted_msg = ""

    for char in msg:
        ascii_code = ord(char)
        binary_code = format(ascii_code, '08b')
        swapped_bits = binary_code[4:] + binary_code[:4]
        swapped_ascii = int(swapped_bits, 2)
        hex_code = format(swapped_ascii, '02X')

        print(f"Character: {char}")
        print(f"ASCII Code: {ascii_code}")
        print(f"Binary Code: {binary_code}")
        print(f"Hexadecimal Code: {hex(ascii_code)}")
        print(f"Encrypted Hexadecimal: {hex_code}\n")

        encrypted_msg += hex_code

    return encrypted_msg


msg_to_encrypt = input("Enter Message: ")
encrypted_msg = cipher(msg_to_encrypt)

print(f"Original Message: {msg_to_encrypt}")
print(f"Encrypted Message: {encrypted_msg}")



## 2

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, x, y = egcd(b % a, a)
        return (g, y - (b // a) * x, x)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('Modular inverse does not exist')
    else:
        return x % m

def affine_encrypt(text, key):
    result = ""
    for char in text:
        if char.isalpha():
            if char.isupper():
                result += chr((key[0] * (ord(char) - ord('A')) + key[1]) % 26 + ord('A'))
            else:
                result += chr((key[0] * (ord(char) - ord('a')) + key[1]) % 26 + ord('a'))
        else:
            result += char
    return result

def affine_decrypt(ciphertext, key):
    result = ""
    a_inv = modinv(key[0], 26)
    for char in ciphertext:
        if char.isalpha():
            if char.isupper():
                result += chr((a_inv * (ord(char) - ord('A') - key[1])) % 26 + ord('A'))
            else:
                result += chr((a_inv * (ord(char) - ord('a') - key[1])) % 26 + ord('a'))
        else:
            result += char
    return result


quit_flag = False
while quit_flag != True:
    print("=============================================")
    text = input("Enter Text: ")
    key1 = int(input("Enter Key 1: "))
    key2 = int(input("Enter Key 2: "))
    key = (key1, key2)
    task = input("Enter E for Encrypt or D for Decrypt: ")
    if task == "E" or task == "e":
        encrypted_text = affine_encrypt(text, key)
        print("Encrypted Text:", encrypted_text)
    elif task == "D" or task == "d":
        decrypted_text = affine_decrypt(text, key)
        print("Decrypted Text:", decrypted_text)
    else:
        print("Invalid Output")

    flag_change = input("Repeat Operation? (Y or N): ")
    if flag_change == "Y" or flag_change == "y":
        quit_flag = False
    else:
        exit(0)


## 3

import math

def encrypt_message(msg, key):
    cipher = ""
    k_indx = 0
    msg_len = float(len(msg))
    msg_lst = list(msg)
    key_lst = sorted(list(key))
    col = len(key)
    row = int(math.ceil(msg_len / col))
    fill_null = int((row * col) - msg_len)
    msg_lst.extend('_' * fill_null)
    matrix = [msg_lst[i: i + col] for i in range(0, len(msg_lst), col)]
    for _ in range(col):
        curr_idx = key.index(key_lst[k_indx])
        cipher += ''.join([row[curr_idx] for row in matrix])
        k_indx += 1
    return cipher

def decrypt_message(cipher, key):
    msg = ""
    k_indx = 0
    msg_indx = 0
    msg_len = float(len(cipher))
    msg_lst = list(cipher)
    col = len(key)
    row = int(math.ceil(msg_len / col))
    key_lst = sorted(list(key))
    dec_cipher = []
    for _ in range(row):
        dec_cipher += [[None] * col]
    for _ in range(col):
        curr_idx = key.index(key_lst[k_indx])
        for j in range(row):
            dec_cipher[j][curr_idx] = msg_lst[msg_indx]
            msg_indx += 1
        k_indx += 1
    try:
        msg = ''.join(sum(dec_cipher, []))
    except TypeError:
        raise TypeError("This program cannot handle repeating words.")
    null_count = msg.count('_')
    if null_count > 0:
        return msg[: -null_count]
    return msg

# Input from user
msg = input("Enter Plain Text: ").replace(" ", "").lower()
key = input("Enter Key: ").replace(" ", "").lower()

cipher = encrypt_message(msg, key)
print("Encrypted Message:", cipher)

decrypted_message = decrypt_message(cipher, key)
print("Decrypted Message:", decrypted_message)


## 4

def hex2bin(s):
    mp = {'0': "0000",
       '1': "0001",
       '2': "0010",
       '3': "0011",
       '4': "0100",
       '5': "0101",
       '6': "0110",
       '7': "0111",
       '8': "1000",
       '9': "1001",
       'A': "1010",
       'B': "1011",
       'C': "1100",
       'D': "1101",
       'E': "1110",
       'F': "1111"}
    bin = ""
    for i in range(len(s)):
       bin = bin + mp[s[i]]
    return bin

def bin2hex(s):
    mp = {"0000": '0',
       "0001": '1',
       "0010": '2',
       "0011": '3',
       "0100": '4',
       "0101": '5',
       "0110": '6',
       "0111": '7',
       "1000": '8',
       "1001": '9',
       "1010": 'A',
       "1011": 'B',
       "1100": 'C',
       "1101": 'D',
       "1110": 'E',
       "1111": 'F'}
    hex = ""
    for i in range(0, len(s), 4):
       ch = ""
       ch = ch + s[i]
       ch = ch + s[i + 1]
       ch = ch + s[i + 2]
       ch = ch + s[i + 3]
       hex = hex + mp[ch]

    return hex


def bin2dec(binary):

    binary1 = binary
    decimal, i, n = 0, 0, 0
    while(binary != 0):
       dec = binary % 10
       decimal = decimal + dec * pow(2, i)
       binary = binary//10
       i += 1
    return decimal


def dec2bin(num):
    res = bin(num).replace("0b", "")
    if(len(res) % 4 != 0):
       div = len(res) / 4
       div = int(div)
       counter = (4 * (div + 1)) - len(res)
       for i in range(0, counter):
          res = '0' + res
    return res


def permute(k, arr, n):
    permutation = ""
    for i in range(0, n):
       permutation = permutation + k[arr[i] - 1]
    return permutation


def shift_left(k, nth_shifts):
    s = ""
    for i in range(nth_shifts):
       for j in range(1, len(k)):
          s = s + k[j]
       s = s + k[0]
       k = s
       s = ""
    return k


def xor(a, b):
    ans = ""
    for i in range(len(a)):
       if a[i] == b[i]:
          ans = ans + "0"
       else:
          ans = ans + "1"
    return ans


initial_perm = [58, 50, 42, 34, 26, 18, 10, 2,
             60, 52, 44, 36, 28, 20, 12, 4,
             62, 54, 46, 38, 30, 22, 14, 6,
             64, 56, 48, 40, 32, 24, 16, 8,
             57, 49, 41, 33, 25, 17, 9, 1,
             59, 51, 43, 35, 27, 19, 11, 3,
             61, 53, 45, 37, 29, 21, 13, 5,
             63, 55, 47, 39, 31, 23, 15, 7]

exp_d = [32, 1, 2, 3, 4, 5, 4, 5,
       6, 7, 8, 9, 8, 9, 10, 11,
       12, 13, 12, 13, 14, 15, 16, 17,
       16, 17, 18, 19, 20, 21, 20, 21,
       22, 23, 24, 25, 24, 25, 26, 27,
       28, 29, 28, 29, 30, 31, 32, 1]

per = [16, 7, 20, 21,
    29, 12, 28, 17,
    1, 15, 23, 26,
    5, 18, 31, 10,
    2, 8, 24, 14,
    32, 27, 3, 9,
    19, 13, 30, 6,
    22, 11, 4, 25]

sbox = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
       [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
       [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
       [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],

       [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
       [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
       [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
       [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],

       [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
       [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
       [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
       [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],

       [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
       [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
       [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
       [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],

       [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
       [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
       [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
       [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],

       [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
       [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
       [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
       [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],

       [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
       [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
       [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
       [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],

       [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
       [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
       [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
       [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]

final_perm = [40, 8, 48, 16, 56, 24, 64, 32,
          39, 7, 47, 15, 55, 23, 63, 31,
          38, 6, 46, 14, 54, 22, 62, 30,
          37, 5, 45, 13, 53, 21, 61, 29,
          36, 4, 44, 12, 52, 20, 60, 28,
          35, 3, 43, 11, 51, 19, 59, 27,
          34, 2, 42, 10, 50, 18, 58, 26,
          33, 1, 41, 9, 49, 17, 57, 25]


def encrypt(pt, rkb, rk):
    pt = hex2bin(pt)

    pt = permute(pt, initial_perm, 64)
    print("After initial permutation", bin2hex(pt))

    left = pt[0:32]
    right = pt[32:64]
    for i in range(0, 16):
       right_expanded = permute(right, exp_d, 48)

       xor_x = xor(right_expanded, rkb[i])

       sbox_str = ""
       for j in range(0, 8):
          row = bin2dec(int(xor_x[j * 6] + xor_x[j * 6 + 5]))
          col = bin2dec(
             int(xor_x[j * 6 + 1] + xor_x[j * 6 + 2] + xor_x[j * 6 + 3] + xor_x[j * 6 + 4]))
          val = sbox[j][row][col]
          sbox_str = sbox_str + dec2bin(val)

       sbox_str = permute(sbox_str, per, 32)

       result = xor(left, sbox_str)
       left = result

       if(i != 15):
          left, right = right, left
       print("Round ", i + 1, " ", bin2hex(left),
          " ", bin2hex(right), " ", rk[i])

    combine = left + right

    cipher_text = permute(combine, final_perm, 64)
    return cipher_text


pt = "123456ABCD132536"
key = "AABB09182736CCDD"

key = hex2bin(key)

keyp = [57, 49, 41, 33, 25, 17, 9,
       1, 58, 50, 42, 34, 26, 18,
       10, 2, 59, 51, 43, 35, 27,
       19, 11, 3, 60, 52, 44, 36,
       63, 55, 47, 39, 31, 23, 15,
       7, 62, 54, 46, 38, 30, 22,
       14, 6, 61, 53, 45, 37, 29,
       21, 13, 5, 28, 20, 12, 4]

key = permute(key, keyp, 56)

shift_table = [1, 1, 2, 2,
          2, 2, 2, 2,
          1, 2, 2, 2,
          2, 2, 2, 1]

key_comp = [14, 17, 11, 24, 1, 5,
          3, 28, 15, 6, 21, 10,
          23, 19, 12, 4, 26, 8,
          16, 7, 27, 20, 13, 2,
          41, 52, 31, 37, 47, 55,
          30, 40, 51, 45, 33, 48,
          44, 49, 39, 56, 34, 53,
          46, 42, 50, 36, 29, 32]

left = key[0:28]
right = key[28:56]

rkb = []
rk = []
for i in range(0, 16):
    left = shift_left(left, shift_table[i])
    right = shift_left(right, shift_table[i])

    combine_str = left + right

    round_key = permute(combine_str, key_comp, 48)

    rkb.append(round_key)
    rk.append(bin2hex(round_key))

print("Plaintext: ",pt)
print("Encryption")
cipher_text = bin2hex(encrypt(pt, rkb, rk))
print("Cipher Text : ", cipher_text)

print("Decryption")
rkb_rev = rkb[::-1]
rk_rev = rk[::-1]
text = bin2hex(encrypt(cipher_text, rkb_rev, rk_rev))
print("Plain Text : ", text)


## 5

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes

# AES S-box
Sbox = (
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
)

# Rcon table
Rcon = (
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
)


def aes_encrypt(message, key):
    cipher = AES.new(key, AES.MODE_ECB)
    encrypted_message = cipher.encrypt(pad(message, AES.block_size))
    return encrypted_message


def aes_decrypt(encrypted_message, key):
    cipher = AES.new(key, AES.MODE_ECB)
    decrypted_message = unpad(cipher.decrypt(encrypted_message), AES.block_size)
    return decrypted_message


def key_expansion(key):
    round_keys = [key]
    for i in range(1, 10):
        prev_round_key = round_keys[i - 1]
        round_key = prev_round_key[1:] + prev_round_key[:1]
        round_key = bytes([Sbox[b] for b in round_key])
        round_key = bytes([round_key[0] ^ Rcon[i - 1]]) + round_key[1:]
        round_key = bytes([round_key[i] ^ prev_round_key[i] for i in range(16)])
        round_keys.append(round_key)
    return round_keys


def print_rounds(rounds):
    for i, round_key in enumerate(rounds):
        print(f"Round {i + 1} key:", round_key.hex())


message = input("Enter your message: ").encode()
key = get_random_bytes(16)  # 128-bit key

rounds = key_expansion(key)
print("Initial Round Key:", key.hex())
print_rounds(rounds)

encrypted_message = aes_encrypt(message, key)
print("Encrypted Message:", encrypted_message.hex())

decrypted_message = aes_decrypt(encrypted_message, key)
print("Decrypted Message:", decrypted_message.decode())


## 6

import random
import math

prime = set()
public_key = None
private_key = None
n = None

def primefiller():
    seive = [True] * 250
    seive[0] = False
    seive[1] = False
    for i in range(2, 250):
        for j in range(i * 2, 250, i):
            seive[j] = False
    for i in range(len(seive)):
        if seive[i]:
            prime.add(i)

def pickrandomprime():
    global prime
    k = random.randint(0, len(prime) - 1)
    it = iter(prime)
    for _ in range(k):
        next(it)
    ret = next(it)
    prime.remove(ret)
    return ret

def setkeys():
    global public_key, private_key, n
    prime1 = pickrandomprime()
    prime2 = pickrandomprime()
    n = prime1 * prime2
    fi = (prime1 - 1) * (prime2 - 1)
    e = 2
    while True:
        if math.gcd(e, fi) == 1:
            break
        e += 1
    public_key = e
    d = 2
    while True:
        if (d * e) % fi == 1:
            break
        d += 1
    private_key = d

def encrypt(message):
    global public_key, n
    e = public_key
    encrypted_text = 1
    while e > 0:
        encrypted_text *= message
        encrypted_text %= n
        e -= 1
    return encrypted_text

def decrypt(encrypted_text):
    global private_key, n
    d = private_key
    decrypted = 1
    while d > 0:
        decrypted *= encrypted_text
        decrypted %= n
        d -= 1
    return decrypted

def encoder(message):
    encoded = []
    for letter in message:
        encoded.append(encrypt(ord(letter)))
    return encoded

def decoder(encoded):
    s = ''
    for num in encoded:
        s += chr(decrypt(num))
    return s

if __name__ == '__main__':
    primefiller()
    setkeys()
    message = input("Enter the message: ")
    coded = encoder(message)

    print("\nInitial message:")
    print(message)
    print("\nPublic key:", public_key)
    print("Private key:", private_key)
    print("\nThe encoded message:")
    print(''.join(str(p) for p in coded))
    print("\nThe decoded message:")
    print(decoder(coded))


## 7

import hashlib
str2hash = input("Enter Message: ")
result = hashlib.md5(str2hash.encode())
print("Original Message:", str2hash)
print("Hash ValueN (MD5):", result.hexdigest())


## 8

import hashlib
str2hash = input("Enter Message: ")
result = hashlib.sha1(str2hash.encode())
print("Original Message:", str2hash)
print("Hash Value (SHA-1):", result.hexdigest())
